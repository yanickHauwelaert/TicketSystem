// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketSystem.Infrastructure.Data;

#nullable disable

namespace TicketSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231107145332_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b5c44d7-29ec-440e-bccb-63d5cf34fbc4"),
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("38dfd248-adb7-43bd-9ff0-348357283ba2"),
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Admin",
                            UserId = new Guid("10000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "hauwelaert.yanick@gmail.com",
                            UserId = new Guid("10000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            ClaimValue = "10000000-0000-0000-0000-000000000000",
                            UserId = new Guid("10000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name",
                            ClaimValue = "YanickHauwelaert",
                            UserId = new Guid("10000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "User",
                            UserId = new Guid("20000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "TestUser1@gmail.com",
                            UserId = new Guid("20000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            ClaimValue = "20000000-0000-0000-0000-000000000000",
                            UserId = new Guid("20000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name",
                            ClaimValue = "TestUser1",
                            UserId = new Guid("20000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "User",
                            UserId = new Guid("30000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "TestUser2@gmail.com",
                            UserId = new Guid("30000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            ClaimValue = "30000000-0000-0000-0000-000000000000",
                            UserId = new Guid("30000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name",
                            ClaimValue = "TestUser2",
                            UserId = new Guid("30000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("10000000-0000-0000-0000-000000000000"),
                            RoleId = new Guid("6b5c44d7-29ec-440e-bccb-63d5cf34fbc4")
                        },
                        new
                        {
                            UserId = new Guid("20000000-0000-0000-0000-000000000000"),
                            RoleId = new Guid("38dfd248-adb7-43bd-9ff0-348357283ba2")
                        },
                        new
                        {
                            UserId = new Guid("30000000-0000-0000-0000-000000000000"),
                            RoleId = new Guid("38dfd248-adb7-43bd-9ff0-348357283ba2")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TicketSystem.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000000"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3187d9e9-2817-4dfc-a349-211c71b07805",
                            Email = "hauwelaert.yanick@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Yanick",
                            LastName = "Hauwelaert",
                            LockoutEnabled = false,
                            NormalizedEmail = "HAUWELAERT.YANICK@GMAIL.COM",
                            NormalizedUserName = "YANICKHAUWELAERT",
                            PasswordHash = "AQAAAAIAAYagAAAAEOpfZzhQUMpqQaC8JZb01GpzLplBXH33olLH7HgLhIZ34HC0fhE3s7ofieiHCEtuwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "848e1df3-fa5b-4a1a-997a-1f48bc7efd27",
                            TwoFactorEnabled = false,
                            UserName = "YanickHauwelaert"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000000"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ecde44eb-6e88-4976-92c0-c86525a1f793",
                            Email = "TestUser1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Test1",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTUSER1@GMAIL.COM",
                            NormalizedUserName = "TESTUSER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEEOOJVlhOXyYhbTUUBhHA4TCKorWee6lF9fChlB/xUT8eTt+tXCvIINNf8yzgwe4UQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33236f14-6925-413e-948f-9f39e267f4ad",
                            TwoFactorEnabled = false,
                            UserName = "TestUser1"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000000"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "acf9b30d-3125-476a-afa1-f4b026b5e396",
                            Email = "TestUser2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Test2",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTUSER2@GMAIL.COM",
                            NormalizedUserName = "TESTUSER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEA9QtLUqzu3sT4r/mTbrfXI0xcq1zMJcpUU2Xt7z5E1OqozEw+q2Q/ku/zG/KRy4kA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f105fbff-49a0-46e2-a4be-6d8c5be3d0dd",
                            TwoFactorEnabled = false,
                            UserName = "TestUser2"
                        });
                });

            modelBuilder.Entity("TicketSystem.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-1000-0000-0000-000000000000"),
                            Name = "Hardware"
                        },
                        new
                        {
                            Id = new Guid("00000000-2000-0000-0000-000000000000"),
                            Name = "Software"
                        },
                        new
                        {
                            Id = new Guid("00000000-3000-0000-0000-000000000000"),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("TicketSystem.Core.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-1000-0000-000000000000"),
                            CategoryId = new Guid("00000000-2000-0000-0000-000000000000"),
                            CreationDate = new DateTime(2023, 11, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "The software keeps freezing when i try to start it",
                            Status = "InProcces",
                            Subject = "Program X freez",
                            UserId = new Guid("30000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-2000-0000-000000000000"),
                            CategoryId = new Guid("00000000-1000-0000-0000-000000000000"),
                            CreationDate = new DateTime(2023, 11, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Hard drive constantly 100% usage",
                            Status = "None",
                            Subject = "Hardrive usage",
                            UserId = new Guid("20000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-3000-0000-000000000000"),
                            CategoryId = new Guid("00000000-3000-0000-0000-000000000000"),
                            CreationDate = new DateTime(2023, 11, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "I get the a lot of blue screens with the following error code some error code",
                            Status = "Done",
                            Subject = "blue screen",
                            UserId = new Guid("20000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-4000-0000-000000000000"),
                            CategoryId = new Guid("00000000-1000-0000-0000-000000000000"),
                            CreationDate = new DateTime(2023, 11, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Fans keep spinning really loud",
                            Status = "None",
                            Subject = "Loud fans",
                            UserId = new Guid("20000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TicketSystem.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TicketSystem.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSystem.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TicketSystem.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
